const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
var jsonParser = bodyParser.json()
const app = express();
const bcrypt = require('bcrypt');
const saltRounds = 10;
var jwt = require('jsonwebtoken');
var token = jwt.sign({ foo: 'bar' }, 'shhhhh');
const secret = 'Adlog'

app.use(cors());
app.use(bodyParser.json());
app.use(express.json());

require('dotenv').config();
const mysql = require('mysql2');

// ‡πÉ‡∏ä‡πâ environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
const db = mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'root',
    database: process.env.DB_NAME || 'gym_management',
    port: process.env.DB_PORT || 3306
});

const { SerialPort } = require("serialport");
const { ReadlineParser } = require("@serialport/parser-readline");
const WebSocket = require("ws");

// üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á WebSocket Server ‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï 8081 (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 8080 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ MAMP ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
const wss = new WebSocket.Server({ port: 8081 });

// ‡πÄ‡∏õ‡∏¥‡∏î Serial Port (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á)
// ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Serial Port ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ server ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ hardware
let serialPort;
let parser;

// ‡∏õ‡∏¥‡∏î Serial Port ‡∏ö‡∏ô production (Vercel)
if (process.env.NODE_ENV !== 'production') {
  try {
    serialPort = new SerialPort({
      path: "COM5", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      baudRate: 9600,
    });

    serialPort.on('open', () => {
      console.log("‚úÖ Serial Port connected successfully");
      parser = new ReadlineParser();
      serialPort.pipe(parser);
    });

    serialPort.on('error', (err) => {
      console.log("‚ö†Ô∏è  Serial Port error:", err.message);
      console.log("   Running in demo mode - fingerprint features will be disabled");
      serialPort = null;
      parser = null;
    });

  } catch (error) {
    console.log("‚ö†Ô∏è  Serial Port not available, running in demo mode");
    console.log("   Fingerprint features will be disabled");
    serialPort = null;
    parser = null;
  }
} else {
  console.log("üöÄ Running on production - Serial Port disabled");
}

if (parser) {
parser.on("data", (data) => {
  const trimmedData = data.trim();
  console.log("üì° Received from Arduino:", trimmedData);


  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Arduino)
  if (trimmedData.startsWith("Fingerprint already exists at ID:")) {
    const fingerprintID = parseInt(trimmedData.split(":")[1], 10);

    console.log(`‚ö†Ô∏è ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà ID: ${fingerprintID}`);

    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({ status: "exists", fingerprintID }));
      }
    });

    return;
  }


  if (trimmedData.startsWith("TEMPLATE_DATA:")) {
    const parts = trimmedData.split(":");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    console.log("üìå Parsed Parts:", parts);

    if (parts.length < 3) {
      console.error("‚ùå Invalid template data: Missing templateHex value", trimmedData);
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `parts[1]` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Fingerprint ID)
    const fingerprintID = parseInt(parts[1], 10);
    if (isNaN(fingerprintID)) {
      console.error("‚ùå Invalid Fingerprint ID:", parts[1]);
      return;
    }

    // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô HEX String
    const templateHex = parts.slice(2).join(":").trim(); 

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ `templateHex`
    if (!templateHex || templateHex.length < 10) {
      console.error("‚ùå Invalid templateHex:", templateHex);
      return;
    }

    console.log(`‚úÖ Fingerprint ID: ${fingerprintID}`);
    console.log(`‚úÖ Template HEX: ${templateHex}`);

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Hex ‡πÄ‡∏õ‡πá‡∏ô Buffer
    try {
      const fingerprintTemplate = Buffer.from(templateHex, "hex");

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Template ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const updateSql = "UPDATE fingerprints SET template = ? WHERE fingerprint_id = ?";
      db.query(updateSql, [fingerprintTemplate, fingerprintID], (err, result) => {
        if (err) {
          console.error("‚ùå Database update error:", err);
          return;
        }

        if (result.affectedRows > 0) {
          console.log(`‚úÖ Template updated for Fingerprint ID: ${fingerprintID}`);
        } else {
          console.log(`‚ö†Ô∏è Fingerprint ID: ${fingerprintID} not found in database.`);
        }
      });
    } catch (error) {
      console.error("‚ùå Failed to convert HEX to Buffer:", error);
    }
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠
if (trimmedData.startsWith("DELETE ENROLL:")) {
  const memberId = parseInt(trimmedData.split(":")[1], 10);

  if (isNaN(memberId)) {
    console.error("‚ùå Invalid Member ID:", memberId);
    return;
  }

  console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á Member ID: ${memberId}`);

  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ fingerprint_id ‡∏Ç‡∏≠‡∏á memberId
  const findFingerprintSql = "SELECT fingerprint_id FROM fingerprints WHERE member_id = ?";
  db.query(findFingerprintSql, [memberId], (err, result) => {
    if (err) {
      console.error("‚ùå Database error:", err);
      return;
    }

    if (result.length === 0) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ:", memberId);
      return;
    }

    const fingerprintId = result[0].fingerprint_id;

    // ‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const deleteSql = "DELETE FROM fingerprints WHERE member_id = ?";
    db.query(deleteSql, [memberId], (err, deleteResult) => {
      if (err) {
        console.error("‚ùå Error deleting fingerprint:", err);
        return;
      }

      console.log(`‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Fingerprint ID: ${fingerprintId}`);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï members ‡πÉ‡∏´‡πâ hasFingerprint = 0
      const updateMemberSql = "UPDATE members SET hasFingerprint = 0 WHERE id = ?";
      db.query(updateMemberSql, [memberId], (err, updateResult) => {
        if (err) {
          console.error("‚ùå Database update error:", err);
          return;
        }

        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Member ID: ${memberId} ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠`);

        // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô React ‡∏ú‡πà‡∏≤‡∏ô WebSocket
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ status: "delete_success", memberId }));
          }
        });
      });
    });
  });
}


  
  if (trimmedData.startsWith("ENROLL_SUCCESS:")) {
    const parts = trimmedData.split(":");

    if (parts.length < 3) {
      console.error("‚ùå Received data is incomplete:", trimmedData);
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ status: "failed", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!" }));
        }
      });
      return;
    }

    const memberId = parseInt(parts[1], 10);
    const fingerprintID = parseInt(parts[2], 10);

    if (isNaN(memberId) || isNaN(fingerprintID)) {
      console.error("‚ùå Invalid memberId or fingerprintID:", memberId, fingerprintID);
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ status: "failed", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!" }));
        }
      });
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ fingerprint_id ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkFingerprintSql = "SELECT * FROM fingerprints WHERE fingerprint_id = ?";
    db.query(checkFingerprintSql, [fingerprintID], (err, rows) => {
      if (err) {
        console.error("‚ùå Database check error:", err);
        return;
      }

      if (rows.length > 0) {
        console.log(`‚ö†Ô∏è Fingerprint ID: ${fingerprintID} already exists.`);
        
        // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà React
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ status: "exists", fingerprintID }));
          }
        });

        return; // ‚ùå ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
      }

      // ‚úÖ ‡∏ñ‡πâ‡∏≤ fingerprint_id ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const insertSql = "INSERT INTO fingerprints (fingerprint_id, member_id) VALUES (?, ?)";
      db.query(insertSql, [fingerprintID, memberId], (err, result) => {
        if (err) {
          console.error("‚ùå Database insert error:", err);
          wss.clients.forEach((client) => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ status: "failed", message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" }));
            }
          });
          return;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `fingerprintID` ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (fingerprintID && (!result || result.affectedRows === 0)) {
          console.log(`‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Fingerprint ID: ${fingerprintID}`);

          wss.clients.forEach((client) => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ status: "failed", fingerprintID }));
            }
          });

          return;
        }

        console.log(`‚úÖ Inserted fingerprint for Member ID: ${memberId} with Fingerprint ID: ${fingerprintID}`);

        const updateSql = "UPDATE members SET hasFingerprint = 1 WHERE id = ?";
        db.query(updateSql, [memberId], (err) => {
          if (err) {
            console.error("‚ùå Database update error:", err);
            return;
          }
          console.log(`‚úÖ Updated members table for Member ID: ${memberId}, set hasFingerprint to 1`);

          // üî• ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á React ‡∏ú‡πà‡∏≤‡∏ô WebSocket
          wss.clients.forEach((client) => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ status: "success", memberId, fingerprintID }));
            }
          });
        });
      });
    });
  } 


  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠
else if (trimmedData.startsWith("SCAN_SUCCESS:")) {
  const fingerprintID = parseInt(trimmedData.split(":")[1], 10);

  if (isNaN(fingerprintID)) {
    console.error("‚ùå Invalid fingerprint ID:", fingerprintID);
    return;
  }

  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö fingerprintID
  const findMemberSql = `
    SELECT members.id AS member_id, members.firstName, members.lastName, members.endDate 
    FROM fingerprints 
    JOIN members ON fingerprints.member_id = members.id 
    WHERE fingerprints.fingerprint_id = ?`;

  db.query(findMemberSql, [fingerprintID], (err, result) => {
    if (err) {
      console.error("‚ùå Database error:", err);
      return;
    }

    if (result.length === 0) {
      console.log("‚ö†Ô∏è Unknown fingerprint ID:", fingerprintID);
      return;
    }

    const { member_id, firstName, lastName, endDate } = result[0];
    const name = `${firstName} ${lastName}`;
    const expiryDate = new Date(endDate);
    const today = new Date();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (expiryDate < today) {
      console.log(`‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (${expiryDate.toISOString().split("T")[0]}), ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ`);
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ status: "expired", memberId: member_id, name }));
        }
      });
      return;
    }

    const scanTime = new Date();

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á scan_logs
    const insertScanSql = "INSERT INTO scan_logs (member_id, scan_time) VALUES (?, ?)";
    db.query(insertScanSql, [member_id, scanTime], (err) => {
      if (err) {
        console.error("‚ùå Database insert error:", err);
        return;
      }
      console.log(`‚úÖ Logged scan for Member ID: ${member_id} (${name}) at ${scanTime}`);

      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ status: "scan", memberId: member_id, name, scanTime }));
        }
      });
    });
  });
}

});
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
wss.on("connection", (ws) => {
  console.log("üîó WebSocket Client Connected");

  ws.on("close", () => {
    console.log("‚ùå WebSocket Client Disconnected");
  });
});





// ‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° `memberId`
app.delete("/members/:memberId/fingerprint", (req, res) => {
  const { memberId } = req.params;

  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ fingerprint_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  const findSql = "SELECT fingerprint_id FROM fingerprints WHERE member_id = ?";
  db.query(findSql, [memberId], (err, results) => {
    if (err) {
      console.error("‚ùå Database error:", err);
      return res.status(500).json({ error: "Database query error" });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "No fingerprint found for this member." });
    }

    const fingerprintId = results[0].fingerprint_id;

    // ‚úÖ ‡∏•‡∏ö fingerprint ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const deleteSql = "DELETE FROM fingerprints WHERE member_id = ?";
    db.query(deleteSql, [memberId], (err, result) => {
      if (err) {
        console.error("‚ùå Error deleting fingerprint:", err);
        return res.status(500).json({ error: "Failed to delete fingerprint" });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `members` ‡πÉ‡∏´‡πâ `hasFingerprint = 0`
      const updateMemberSql = "UPDATE members SET hasFingerprint = 0 WHERE id = ?";
      db.query(updateMemberSql, [memberId], (err) => {
        if (err) {
          console.error("‚ùå Error updating member status:", err);
          return res.status(500).json({ error: "Failed to update member fingerprint status" });
        }

        console.log(`‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Member ID: ${memberId}`);
        res.json({ message: "Fingerprint deleted successfully." });
      });
    });
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß
app.get("/members/registered", (req, res) => {
  const query = `
      SELECT members.id, members.firstName, members.lastName 
      FROM fingerprints 
      JOIN members ON fingerprints.member_id = members.id
  `;

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Database query error" });
      }

      res.json(results);
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß
app.get("/members/registered", (req, res) => {
  const query = `
      SELECT members.id, members.firstName, members.lastName 
      FROM fingerprints 
      JOIN members ON fingerprints.member_id = members.id
  `;

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Database query error" });
      }

      res.json(results);
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á fingerprint_id ‡∏ï‡∏≤‡∏° memberId
app.get("/api/finger/:memberId/getfingerprint", (req, res) => {
  const { memberId } = req.params;
  const query = "SELECT fingerprint_id FROM fingerprints WHERE member_id = ?";

  db.query(query, [memberId], (err, results) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Database query error" });
      }

      if (results.length === 0) {
          return res.status(404).json({ error: "Fingerprint not found for this member." });
      }

      res.json({ fingerprint_id: results[0].fingerprint_id });
  });
});


// ‚úÖ ‡∏•‡∏ö fingerprint ‡∏ï‡∏≤‡∏° memberId
app.delete("/api/finger/:memberId/delfingerprint", (req, res) => {
  const { memberId } = req.params;
  const query = "DELETE FROM fingerprints WHERE member_id = ?";

  db.query(query, [memberId], (err, result) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Failed to delete fingerprint" });
      }

      if (result.affectedRows === 0) {
          return res.status(404).json({ error: "No fingerprint found for this member." });
      }

      res.json({ message: "‚úÖ Fingerprint deleted successfully." });
  });
});

// ‚úÖ API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
app.get('/api/members/:id/check-access', async (req, res) => {
  const { id } = req.params;

  try {
    // ‚úÖ ‡πÉ‡∏ä‡πâ await db.query() (‡πÅ‡∏ö‡∏ö Promise)
    const [rows] = await db.query('SELECT endDate FROM members WHERE id = ?', [id]);

    if (rows.length === 0) {
      return res.status(404).json({ error: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ' });
    }

    const endDate = new Date(rows[0].endDate);
    const currentDate = new Date();

    if (endDate < currentDate) {
      return res.json({ access: false, message: '‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' });
    }

    res.json({ access: true, message: '‚úÖ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' });
  } catch (error) {
    console.error('‚ùå Database Error:', error);
    res.status(500).json({ error: 'Database error' });
  }
});


// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏£‡∏´‡∏±‡∏™ 4 ‡∏´‡∏•‡∏±‡∏Å
const generateCode = () => {
  return Math.floor(1000 + Math.random() * 9000).toString();
};




app.put('api/members/:id/status', async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  try {
    const result = await db.query('UPDATE members SET status = ? WHERE id = ?', [status, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Member not found' });
    }

    res.json({ message: 'Status updated successfully' });
  } catch (error) {
    console.error('Error updating member status:', error);
    res.status(500).json({ error: 'Database error' });
  }
});



app.post("/api/dailymembers", async (req, res) => {
  const { name } = req.body;
  const amount = 100; // ‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 100 ‡∏ö‡∏≤‡∏ó
  const code = generateCode();
  const uses_remaining = 2;
  const date = new Date().toISOString().split("T")[0];

  if (!name) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠!" });
  }

  try {
      const sql = `INSERT INTO Dailymembers (name, amount, code, uses_remaining, date) VALUES (?, ?, ?, ?, ?)`;
      await db.promise().query(sql, [name, amount, code, uses_remaining, date]);

      res.status(201).json({
          message: "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          code: code,
          uses_remaining: uses_remaining,
      });
  } catch (error) {
      console.error("‚ùå Error processing payment:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});


// üìå **API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ**
app.get("/api/dailymembers", async (req, res) => {
  try {
      const [rows] = await db.promise().query(`SELECT * FROM Dailymembers WHERE uses_remaining > 0`);
      res.json(rows);
  } catch (error) {
      console.error("‚ùå Error fetching data:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});


// üìå **API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™ (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á)**
app.post("/api/dailymembers/use-code", async (req, res) => {
  const { code } = req.body;

  if (!code) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™!" });
  }

  try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      const [rows] = await db.promise().query(`SELECT * FROM Dailymembers WHERE code = ? AND uses_remaining > 0`, [code]);

      if (rows.length === 0) {
          return res.status(400).json({ error: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!" });
      }

      // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
      await db.promise().query(`UPDATE Dailymembers SET uses_remaining = uses_remaining - 1 WHERE code = ?`, [code]);

      res.json({ message: "‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", remaining: rows[0].uses_remaining - 1 });
  } catch (error) {
      console.error("‚ùå Error updating code usage:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™" });
  }
});





app.post("/api/addmembers", (req, res) => {
  const { id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  db.query("SELECT id FROM members WHERE id = ?", [id], (err, results) => {
    if (err) {
      console.error("‚ùå Error checking existing ID:", err);
      res.status(500).json({ error: "Database error" });
      return;
    }

    if (results.length > 0) {
      return res.status(400).json({ error: "‚ùå ID already exists. Please use another ID." });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const insertQuery =
      "INSERT INTO members (id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    db.query(
      insertQuery,
      [id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate],
      (err, results) => {
        if (err) {
          console.error("‚ùå Error adding member:", err);
          res.status(500).json({ error: "Failed to add member" });
          return;
        }
        res.status(201).json({ message: "‚úÖ Member added successfully!", id });
      }
    );
  });
});

app.post("/api/fingerprint/enroll", (req, res) => {
  const { memberId } = req.body;

  if (!memberId) {
      return res.status(400).json({ message: "Member ID is required." });
  }

  if (!serialPort) {
      return res.status(503).json({ message: "Fingerprint scanner not available. Running in demo mode." });
  }

  const command = `ENROLL:${memberId}\n`;
  serialPort.write(command, (err) => {
      if (err) {
          console.error("Failed to send command to Arduino:", err);
          return res.status(500).json({ message: "Failed to send command to Arduino." });
      }
      console.log("Sent to Arduino:", command);
      res.status(200).json({ message: "Enrollment started. Please scan your fingerprint." });
  });
});

// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/daily-reports", (req, res) => {
  const query = "SELECT * FROM dailyreports";

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Error fetching data:", err);
          res.status(500).json({ error: "Failed to fetch data" });
          return;
      }
      res.status(200).json(results);
  });
});

// ‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino/ESP32
app.post("/api/fingerprint/delete", (req, res) => {
  const { memberId } = req.body;

  if (!memberId) {
      return res.status(400).json({ message: "Member ID is required." });
  }

  if (!serialPort) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ serial port ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const deleteSql = "DELETE FROM fingerprints WHERE member_id = ?";
      db.query(deleteSql, [memberId], (err, result) => {
          if (err) {
              console.error("‚ùå Error deleting fingerprint:", err);
              return res.status(500).json({ error: "Failed to delete fingerprint" });
          }

          const updateMemberSql = "UPDATE members SET hasFingerprint = 0 WHERE id = ?";
          db.query(updateMemberSql, [memberId], (err) => {
              if (err) {
                  console.error("‚ùå Error updating member status:", err);
                  return res.status(500).json({ error: "Failed to update member fingerprint status" });
              }

              console.log(`‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Member ID: ${memberId} (Demo mode)`);
              res.json({ message: "Fingerprint deleted successfully (Demo mode)." });
          });
      });
      return;
  }

  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ fingerprint_id ‡∏Ç‡∏≠‡∏á memberId
  const findSql = "SELECT fingerprint_id FROM fingerprints WHERE member_id = ?";
  db.query(findSql, [memberId], (err, results) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Database query error" });
      }

      if (results.length === 0) {
          return res.status(404).json({ error: "No fingerprint found for this member." });
      }

      const fingerprintId = results[0].fingerprint_id;

      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino/ESP32 ‡∏ú‡πà‡∏≤‡∏ô Serial
      const command = `DELETE ENROLL:${memberId}\n`;
      serialPort.write(command, (err) => {
          if (err) {
              console.error("‚ùå Failed to send command to Arduino:", err);
              return res.status(500).json({ message: "Failed to send command to Arduino." });
          }

          console.log("üì° Sent to Arduino:", command);

          // ‚úÖ ‡∏•‡∏ö fingerprint ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const deleteSql = "DELETE FROM fingerprints WHERE member_id = ?";
          db.query(deleteSql, [memberId], (err, result) => {
              if (err) {
                  console.error("‚ùå Error deleting fingerprint:", err);
                  return res.status(500).json({ error: "Failed to delete fingerprint" });
              }

              // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `members` ‡πÉ‡∏´‡πâ `hasFingerprint = 0`
              const updateMemberSql = "UPDATE members SET hasFingerprint = 0 WHERE id = ?";
              db.query(updateMemberSql, [memberId], (err) => {
                  if (err) {
                      console.error("‚ùå Error updating member status:", err);
                      return res.status(500).json({ error: "Failed to update member fingerprint status" });
                  }

                  console.log(`‚úÖ ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Member ID: ${memberId}`);
                  res.json({ message: "Fingerprint deleted successfully." });
              });
          });
      });
  });
});





// üìå API: ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
app.post("/api/payments", (req, res) => {
  const { memberId, amount, date } = req.body;
  const query = "INSERT INTO payments (memberId, amount, date) VALUES (?, ?, ?)";

  db.query(query, [memberId, amount, date], (err, results) => {
      if (err) {
          console.error("‚ùå Error processing payment:", err);
          res.status(500).json({ error: "Failed to process payment" });
          return;
      }
      res.json({ message: "‚úÖ Payment processed successfully!" });
  });
});

db.connect((err) => {
  if (err) {
    console.error('‚ùå MySQL connection failed:', err.message);
    console.log('‚ö†Ô∏è  Please start MAMP MySQL server');
    console.log('   Database features will be limited');
  } else {
    console.log('‚úÖ Connected to MySQL database');
  }
});



// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (Scan Reports)
app.get("/api/reports", (req, res) => {
  const sql = `
      SELECT logs.id, logs.member_id AS memberId, 
             members.firstName, members.lastName, 
             DATE_FORMAT(logs.scan_time, '%Y-%m-%d %H:%i:%s') AS scanTime
      FROM scan_logs AS logs
      LEFT JOIN members ON logs.member_id = members.id  -- ‚úÖ ‡πÉ‡∏ä‡πâ LEFT JOIN ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô members
      ORDER BY logs.scan_time DESC;
  `;

  db.query(sql, (err, results) => {
      if (err) {
          console.error("‚ùå Database error:", err);
          return res.status(500).json({ error: "Database error" });
      }
      console.log("üìå Sending scan logs data:", results);
      res.json(results.map((row) => ({
          id: row.id,
          memberId: row.memberId,
          name: row.firstName && row.lastName ? `${row.firstName} ${row.lastName}` : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
          scanTime: row.scanTime,
      })));
  });
});


// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/fingerprints", (req, res) => {
  const query = "SELECT * FROM fingerprints";

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Error fetching members:", err);
          res.status(500).json({ error: "Failed to fetch members" });
          return;
      }
      res.status(200).json(results);
  });
});

// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/members", (req, res) => {
  const query = "SELECT * FROM members";

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Error fetching members:", err);
          res.status(500).json({ error: "Failed to fetch members" });
          return;
      }
      res.status(200).json(results);
  });
});

app.get("/api/members/latestId", (req, res) => {
  const query = "SELECT MAX(id) AS latestId FROM members";

  db.query(query, (err, results) => {
    if (err) {
      console.error("‚ùå Error fetching latest member ID:", err);
      res.status(500).json({ error: "Failed to fetch latest ID" });
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1
    const latestId = results[0].latestId !== null ? results[0].latestId : 0;
    const nextId = latestId + 1; // ‡πÉ‡∏´‡πâ frontend ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    res.json({ latestId: nextId });
  });
});





app.post("/api/members", (req, res) => {
  const { id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  db.query("SELECT id FROM members WHERE id = ?", [id], (err, results) => {
    if (err) {
      console.error("‚ùå Error checking existing ID:", err);
      res.status(500).json({ error: "Database error" });
      return;
    }

    if (results.length > 0) {
      return res.status(400).json({ error: "‚ùå ID already exists. Please use another ID." });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const insertQuery =
      "INSERT INTO members (id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    db.query(
      insertQuery,
      [id, firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate],
      (err, results) => {
        if (err) {
          console.error("‚ùå Error adding member:", err);
          res.status(500).json({ error: "Failed to add member" });
          return;
        }
        res.status(201).json({ message: "‚úÖ Member added successfully!", id });
      }
    );
  });
});




// üìå API: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
app.put("/api/members/:id", (req, res) => {
  const { id } = req.params;
  const { firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate } = req.body;
  const query = "UPDATE members SET firstName = ?, lastName = ?, age = ?, phone = ?, email = ?, duration = ?, originalPrice = ?, points = ?, discount = ?, startDate = ?, endDate = ? WHERE id = ?";

  db.query(query, [firstName, lastName, age, phone, email, duration, originalPrice, points, discount, startDate, endDate, id], (err, results) => {
      if (err) {
          console.error("‚ùå Error updating member:", err);
          res.status(500).json({ error: "Failed to update member" });
          return;
      }
      res.json({ message: "‚úÖ Member updated successfully!" });
  });
});

// üìå API: ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï payments
app.delete("/api/members/:id", (req, res) => {
  const { id } = req.params;

  // 1Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï payments (‡πÉ‡∏´‡πâ memberId ‡πÄ‡∏õ‡πá‡∏ô NULL)
  const updatePaymentsQuery = "UPDATE payments SET memberId = NULL WHERE memberId = ?";
  db.query(updatePaymentsQuery, [id], (err) => {
      if (err) {
          console.error("‚ùå Error updating payments:", err);
          res.status(500).json({ error: "Failed to update payments" });
          return;
      }

      // 2Ô∏è‚É£ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const deleteMemberQuery = "DELETE FROM members WHERE id = ?";
      db.query(deleteMemberQuery, [id], (err) => {
          if (err) {
              console.error("‚ùå Error deleting member:", err);
              res.status(500).json({ error: "Failed to delete member" });
              return;
          }
          res.json({ message: "‚úÖ Member deleted successfully!" });
      });
  });
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
app.get("/api/fingrtprints/members", (req, res) => {
  db.query("SELECT * FROM members WHERE hasFingerprint = 0", (error, results) => {
    if (error) {
      console.error("Database error:", error);
      return res.status(500).json({ message: "Database error." });
    }
    res.json(results);
  });
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
app.get("/api/fingrtprints_id", (req, res) => {
  const query = "SELECT * FROM fingerprints WHERE fingerprint_id IS NOT NULL";

  db.query(query, (error, results) => {
    if (error) {
      console.error("‚ùå Database error:", error);
      return res.status(500).json({ message: "Database error." });
    }
    res.json(results);
  });
});

// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/members", (req, res) => {
  const query = "SELECT * FROM members";

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Error fetching members:", err);
          res.status(500).json({ error: "Failed to fetch members" });
          return;
      }
      res.status(200).json(results);
  });
});

// üìå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/users", (req, res) => {
  const query = "SELECT * FROM users";

  db.query(query, (err, results) => {
      if (err) {
          console.error("‚ùå Error fetching members:", err);
          res.status(500).json({ error: "Failed to fetch members" });
          return;
      }
      res.status(200).json(results);
  });
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/payments', (req, res) => {
    const query = 'SELECT * FROM payments';
  
    db.query(query, (err, results) => {
      if (err) {
        console.error('Error fetching payments:', err);
        res.status(500).json({ error: 'Failed to fetch payments' });
        return;
      }
      res.status(200).json(results);
    });
  });
  
  app.get('/api/members', async (req, res) => {
    try {
      const members = await Member.find();
      const today = new Date();
  
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° endDate
      const updatedMembers = members.map((member) => {
        const endDate = new Date(member.endDate);
        if (endDate < today) {
          member.status = 'Inactive';
        }
        return member;
      });
  
      res.status(200).send(updatedMembers);
    } catch (error) {
      res.status(500).send('Error fetching members');
    }
  });

  app.get('/api/members', async (req, res) => {
    try {
      const members = await db.query('SELECT id, firstName, lastName, originalPrice FROM members');
      res.json(members.rows); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• originalPrice ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    } catch (err) {
      console.error(err);
      res.status(500).send('Error retrieving members');
    }
  });
  
  app.post('/api/payments', async (req, res) => {
    try {
      const { memberId, amount, date } = req.body;
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ memberId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const member = await Member.findById(memberId);
      if (!member) return res.status(404).send('Member not found');
  
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
      const payment = new Payment({
        memberId,
        amount,
        date,
      });
  
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      await payment.save();
  
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô Active ‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      member.status = 'Active';
      await member.save();
  
      res.status(201).send(payment);
    } catch (error) {
      console.error('Error processing payment:', error);
      res.status(500).send('Error processing payment');
    }
  });

  
  app.put('/api/members/:id', (req, res) => {
    const { id } = req.params;
    const { firstName, lastName, phone, email, points, duration, startDate, endDate, status, originalPrice } = req.body;
  
    const sql = `
      UPDATE members 
      SET firstName = ?, lastName = ?, phone = ?, email = ?, points = ?, duration = ?, startDate = ?, endDate = ?, status = ?, originalPrice = ?
      WHERE id = ?
    `;
    
    db.query(sql, [firstName, lastName, phone, email, points, duration, startDate, endDate, status, originalPrice, id], (err, result) => {
      if (err) {
        console.error('Error updating member:', err);
        return res.status(500).json({ message: 'Error updating member' });
      }
      res.status(200).json({ message: 'Member updated successfully' });
    });
  });
  
  
  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° ID
app.get('/api/members/:id', (req, res) => {
    const { id } = req.params;
    const query = 'SELECT * FROM members WHERE id = ?';
  
    db.query(query, [id], (err, results) => {
      if (err) {
        console.error('Error fetching member by ID:', err);
        res.status(500).json({ error: 'Failed to fetch member' });
        return;
      }
  
      if (results.length === 0) {
        res.status(404).json({ error: 'Member not found' });
        return;
      }
  
      res.status(200).json(results[0]); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏≠‡∏ô‡∏î‡πå
    });
  });

  
  
  app.post("/fingerprints", (req, res) => {
    console.log(req.body);
    res.json({ message: "Fingerprint data received successfully" });
  });
  

  app.post("/api/fingerprint/enroll", (req, res) => {
    const { memberId } = req.body;
  
    if (!memberId) {
        return res.status(400).json({ message: "Member ID is required." });
    }

    if (!serialPort) {
        return res.status(503).json({ message: "Fingerprint scanner not available. Running in demo mode." });
    }
  
    const command = `ENROLL:${memberId}\n`;
    serialPort.write(command, (err) => {
        if (err) {
            console.error("Failed to send command to Arduino:", err);
            return res.status(500).json({ message: "Failed to send command to Arduino." });
        }
        console.log("Sent to Arduino:", command);
        res.status(200).json({ message: "Enrollment started. Please scan your fingerprint." });
    });
  });
  
  app.delete('/api/members/:id', (req, res) => {
    const { id } = req.params;
  
    const query = 'DELETE FROM members WHERE id = ?';
  
    db.query(query, [id], (err, result) => {
      if (err) {
        console.error('Error deleting member:', err);
        res.status(500).json({ error: 'Failed to delete member' });
        return;
      }
  
      if (result.affectedRows === 0) {
        res.status(404).json({ error: 'Member not found' });
        return;
      }
  
      res.status(200).json({ message: 'Member deleted successfully' });
    });
  });
  
  app.get("/api/dailymembers/search", async (req, res) => {
    const searchQuery = req.query.q;

    if (!searchQuery || searchQuery.trim() === "") {
        return res.json([]); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
    }

    try {
        const [rows] = await db.promise().query(
            "SELECT * FROM dailymembers WHERE name LIKE ? OR code LIKE ?",
            [`%${searchQuery}%`, `%${searchQuery}%`]
        );
        res.json(rows);
    } catch (error) {
        console.error("‚ùå Error searching daily members:", error);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
    }
});


app.get("/api/member/search", async (req, res) => {
  const searchQuery = req.query.q;

  console.log("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", searchQuery);

  if (!searchQuery || searchQuery.trim() === "") {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
      return res.json([]);
  }

  try {
      const sql = "SELECT * FROM members WHERE firstName LIKE ? OR lastName LIKE ? OR phone LIKE ? OR email LIKE ?";
      const params = [`%${searchQuery}%`, `%${searchQuery}%`, `%${searchQuery}%`, `%${searchQuery}%`];

      console.log("üõ† SQL Query:", sql);
      console.log("üîé Parameters:", params);

      const [rows] = await db.promise().query(sql, params);

      console.log("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", rows);
      res.json(rows);
  } catch (error) {
      console.error("‚ùå Error searching members:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
  }
});




  app.post('/api/members/check-id', (req, res) => {
    const { id } = req.body;
  
    db.query('SELECT * FROM members WHERE id = ?', [id], (err, result) => {
      if (err) return res.status(500).send('Database error');
      if (result.length > 0) {
        return res.status(400).send('ID already exists');
      }
  
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      db.query('INSERT INTO members (id) VALUES (?)', [id], (err) => {
        if (err) return res.status(500).send('Database error');
        res.send('ID saved successfully');
      });
    });
  });

  
// üìå **API ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Register)**
app.post("/api/register", async (req, res) => {
  const { Email, Password, fname, lname } = req.body;

  if (!Email || !Password || !fname || !lname) {
      return res.status(400).json({ status: "error", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!" });
  }

  try {
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [existingUser] = await db.promise().execute(
          "SELECT * FROM users WHERE LOWER(Email) = LOWER(?)",
          [Email]
      );

      if (existingUser.length > 0) {
          return res.status(409).json({ status: "error", message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!" });
      }

      // üîí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const hash = await bcrypt.hash(Password, 10);

      // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await db.promise().execute(
          "INSERT INTO users (Email, Password, fname, lname) VALUES (?, ?, ?, ?)",
          [Email, hash, fname, lname]
      );

      res.json({ status: "Ok", message: "‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (err) {
      console.error("‚ùå Error during registration:", err);
      res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" });
  }
});


app.post('/api/login', async (req, res) => {
  const { Email, Password } = req.body;

  if (!Email || !Password) {
      return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
  }

  try {
      const [rows] = await db.promise().execute(
          'SELECT * FROM users WHERE LOWER(Email) = LOWER(?)',
          [Email]
      );

      if (rows.length === 0) {
          return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
      }

      const user = rows[0];
      console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', user);

      // üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const isMatch = await bcrypt.compare(Password, user.Password);
      if (!isMatch) {
          return res.status(401).json({ status: 'error', message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }

      // üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication
      const token = jwt.sign({ id: user.id, email: user.Email }, 'secretKey', { expiresIn: '1h' });

      return res.status(200).json({ status: 'Ok', token, user: { id: user.id, fname: user.fname, lname: user.lname, email: user.Email } });

  } catch (error) {
      console.error('‚ùå Database Error:', error);
      return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});






const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
